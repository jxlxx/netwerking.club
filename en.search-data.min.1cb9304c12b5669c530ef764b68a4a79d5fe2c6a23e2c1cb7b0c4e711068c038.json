[{"id":0,"href":"/netwerking.club/docs/privacy-and-security/anonymity-and-privacy/","title":"Anonymity \u0026 Privacy","section":"Privacy \u0026 Security","content":" Anonymity \u0026amp; Privacy # "},{"id":1,"href":"/netwerking.club/docs/interworking/congestion/","title":"Congestion","section":"Interworking","content":" Congestion # "},{"id":2,"href":"/netwerking.club/docs/applications/dns/","title":"DNS","section":"Applications","content":" DNS # "},{"id":3,"href":"/netwerking.club/docs/fundamentals/","title":"Fundamentals","section":"Docs","content":" Fundamentals # Hardware Basics # A router is a networking device (that may be composed of many virtual network devices) that connects multiple devices, phones, computers, etc, to form a local area network (LAN). Most routers allow devices to connect wirelessly or through Ethernet.\nAn access point, often shortened to just AP allows devices to connect wirelessly to a Local Area Network, LAN and can also be used to extend the range of coverage to connect to a LAN (you can be physically farther away). The AP then also has a high-speed Ethernet cable runs to a router. (There is also such a thing as WAPs, wireless access points).\nA router acts as a hub for a LAN, and an AP is a sub-device in the LAN. Routers can act as APs, but not all APs can act as routers.\nA modem is a device that connects your LAN to a WAN (Wide Area Network). It is the thing that takes the digital signals that devices send to routers (binary data) and transforms it via modulation into analog data (electricity) that gets transmitted to the WAN. It also receives analog data and demodulates it, so the router can send it to the devices that asked for it.\nIt is not uncommon to see router/modem combos.\nA switch is a networking device that connects devices together. Usually physically, via ethernet cables. The word switch usually means a device that forwards data between devices at the layer 2 level using MAC addresses. There is such a thing as layer 3 switches, which incorporate some routing functionality. Routers usually have a kind of switch built-in to them.\nTypes of Networks # The internet is a network of networks.\nA Local Area Network (LAN) is a small private network. For example, all the devices (computers, phones, tablets) in your home connected to your wifi network comprise a LAN.\nA Metropolitan Area Network (MAN) is the network of a town or city.\nA Wide Area Network (WAN) is a very large network owned and maintained by multiple stakeholders.\nLayers (OSI Model) # Networking is electricity on wires. And it’s data. But it is also protocols. And it is also packets. And servers. And sometime data is encrypted and sometimes it’s compressed. And different data moves differently. Point is that there’s lots of ways to talk about networking, and there’s lots of lays of abstraction. The same data can be discussed in many ways, and most people use the OSI model as a guide. So when people are saying L2, L4 – it is usually in reference to the OSI model.\nOSI model stands for Open Systems Interconnection model, but nobody knows that or ever says it out loud.\n# Name things that happen 7 Application What the user interacts with, http, ftp 6 Presentation Handler encryption, decryption, compression, decompression. 5 Session channels, called sessions, between devices. 4 Transport TCP, UDP 3 Network Deciding what physical path the packets will take 2 Data Link define the format of the data/packets 1 Physical the physical bit, electricity on a wire kind of shit Although the OSI model gets all the attention, there’s actually other models. TCP/IP, the protocol that runs the internet, actually has it’s own model defined in RFC 1122/RFC 1123. It is a simpler model with only 4 layers.\n# Name OSI Layers 4 Application Application (7) + Presentation (6) + Session (5) 3 Transport Transport (4) 2 Internet Network (3) 1 Link Link (2) Personally, this makes more sense to because I don’t know enough about the details of OSI layers 5 through 7 to consider them separate layers.\nIP Addresses, IPv4, IPv6 # IP addresses are strings of numbers that correspond to a unique device on some network.\nIPv4 addresses are made of 32 bits which usually organized into 4 bytes (also sometimes, thought rarely, called octets).\nIPv6 addresses are made of 128 bits and usually written in hex.\nIf you have lots of zeros, you may omit them.\nPairs of equivalent IPv6 addresses:\n2001:0db8:c9d2:0012:0000:0000:0000:0051 2001:db8:c9d2:12::51 2001:0db8:ab00:0000:0000:0000:0000:0000 2001:db8:ab00:: 0000:0000:0000:0000:0000:0000:0000:0001 ::1 The address ::1 is the loopback address. It always means this machine I’m running on now.\nIn IPv4, the loopback address is 127.0.0.1.\nThere’s an IPv4-compatibility mode for IPv6 addresses. To represent the IPv4 address 192.0.2.33 as an IPv6 address you write it like this: ::ffff:192.0.2.33\nPackets, Frames, Etc. # Data is bytes.\nTo share data through a network, there needs to be a common protocol that everyone agrees on, and data bytes must be in a specific format.\nThe most used data units in networks are the packet, frame, and datagram.\nThe word packet is often used as a catchall term for all the previously mention data units as well as others, but when you say packet and you want to refer to a specify type of packet called a packet, you probably mean an internet packet (IP).\nInternet Packets are used for connection-oriented protocols.\nData is divided into packets, sent over the internet, then recombined to recreate the original data at its destination.\nPackets are data units with the network layer (L3) of OSI.\nThere are limits to the size of IP packets. It is defined by something called MTU, a Maximum Transmitted Unit. If packets are bigger than the MTU of a network, then they are broken up into smaller pieces of data called fragments. The network layer (L3) is also responsible for fragmentation.\nPackets have DF flag, “Don’t Fragment.” If the DF flag is set to 1, and the size of the packet is bigger than the MTU of the packet, the packet is discarded.\nNext there are frames.\nThe main difference between a packet and a frame is its association with the OSI layers. While a packet is used in the network layer, a frame is a unit of data in the data link layer. Frames are used by Ethernet.\nA frame contains more information about the transmitted message than a packet. Like some flags, MAC addresses, etc.\nDatagrams are used for connectionless protocols like UDP.\nSockets # Sockets are the endpoints of communication.\nSocket is a big word. Like packets, its a bit of a catch-all. However in networking we are usually we are talking about Internet Sockets.\nA socket allows programs to communicate to each other by using Unix file descriptors, sometimes over a network.\nA file descriptor is just an integer associated with an open file.\nThat file can be anything: a network connection, a pipe a terminal, a picture of a cat, whatever. This comes from the Unix philosophy that everything in Unix is a file. When Unix systems do any kind of I/O the do so by reading or writing to a file descriptor.\nInternet sockets are also called DARPA Internet addresses. But no one says that.\nThere are also many types of internet sockets, but we are going to talk about two kinds: Stream Sockets and Datagram Sockets. (Another interesting, and very powerful type of internet socket is a Raw Socket).\nStream sockets are reliable two-way connected internet streams. Things get output the same order they were input. Stream sockets use a protocol called Transmission Control Protocol, TCP. TCP makes ensures data arrive sequentially and error-free.\nTCP is often heard when saying TCP/IP. IP stands for Internet Protocol and primarily deals with internet routing and is not concerned with data integrity.\nDatagram sockets don’t care about order. They don’t care if they arrive where they are supposed to or not. If it does arrive though, the data in the packet will be error-free. Datagrams also use IP for routing, but they don’t use TCP, they use UDP.\nWanna hear a joke about UDP? …nevermind you probably wouldn’t get it.\nA socket address is usually a combination of a file descriptor, an IP address and a port number. TCP/IP creates socket addresses that is unique throughout all Internet networks. Those socket addresses are used to read data on one machine and write it on another, and transmit that data via packets.\nWiFi Networks \u0026amp; Security # First of all, WiFi stands for nothing. Annoying.\nWPA stands for Wifi Protected Access. WPA, WPA2, and WPA3 are security certification programs developed by the wifi alliance to secure wireless computer networks. Routers use WPA* to communicate wirelessly with devices and then send that data off into the WAN. WPA is broken, we mostly use WPA2 now.\nTLS stand for Transport Layer Security. It is the newer version and successor of (the now depreciated) Secure Sockets Layer (SSL). It is used, most commonly, in securing HTTPS. (HTTPS means HTTP over SSL/TLS). We are now at TLS 1.3, released in 2018. TLS 1.2 was released in 2008, TLS 1.1 in 2006, and TLS 1.0 in 1999.\nTLS/SSL use certificates to provide privacy/confidentiality, integrity, and authenticity. It runs in the application layer and it composed of two layers itself the TLS record and the TLS handshake protocols.\nTLS certificates are a type of digital certificate issued by a CA (Certificate Authority). Digital certificates (aka identity certificates or public key certificates) are digital files used to certify the ownership of a public key. Each TLS certificate consists of a key pair made of a public key and private key. The server shares its TLS/SSL certificate and its public key with the client to establish a secure connection and a unique session key.\nTTLS stands for tunnelled TLS.\nTunnelling in networking refers to the encapsulation of packets: wrapping packets inside of other packets. Tunnelling can be used to set up secure connections between networks, enable the usage of unsupported protocols, and sometimes bypass firewalls.\nPackets can be split into 2 parts: the header and the payload. The header indicates the packets destination (among other things) and the payload is the actual content. To encapsulate packet A into packet B, the header and payload of packet A become the payload of packet B.\nA VPN (virtual private network) is a secure, encrypted connection over a public network. Basically you send data over an insecure network (anyone can connect and listen in) and encapsulate your packets and encrypt their payloads. Spilt tunnelling is when you route some of your data through your VPN and some through some other network.\nSecure Shell Tunnel.\nThe difference between VPN and SSH tunnels is that in VPN tunnelling, the security comes from altering the data that you want to send and sending through an insecure medium. In SSH, you create a private network (via a public network) and then send your data through a secure channel, so your data doesn’t necessarily need to be encrypted. Another difference is that VPN runs in the transport layer, while SSH runs in the application layer.\nNetwork Performance # Network performance is usually measured in two fundamental ways, bandwidth and latency. Also called throughput and delay.\nBandwidth is # of bits over time.\nLatency is how long it takes to transmit each bit of data.\nLatency has 3 components:\nthe speed of light, the time to transmit data (a function of the amount of data and the bandwidth size), and queuing of the data as it moves through the network. Latency = Propagation + Transmit + Queue Propagation = Distance/SpeedOfLight Transmit = Size/Bandwidth Types of Links # full-duplex bidirectional (at the same time) half-duplex bidirectional (not at the same time) simplex unidirectional "},{"id":4,"href":"/netwerking.club/docs/privacy-and-security/network-security/","title":"Network Security","section":"Privacy \u0026 Security","content":" Network Security # "},{"id":5,"href":"/netwerking.club/docs/other/overlay-networks/","title":"Overlay Networks","section":"Other","content":" Overlay Networks # "},{"id":6,"href":"/netwerking.club/docs/interworking/presentation-and-compression/","title":"Presentation \u0026 Compression","section":"Interworking","content":" Presentation \u0026amp; Compression # "},{"id":7,"href":"/netwerking.club/docs/interworking/routing/","title":"Routing","section":"Interworking","content":" Routing # "},{"id":8,"href":"/netwerking.club/docs/protocols/rpc/","title":"RPC","section":"Protocols","content":" Remote Procedure Calls (RPC) # "},{"id":9,"href":"/netwerking.club/docs/protocols/rtp/","title":"RTP","section":"Protocols","content":" Real Time Protocols (RTP) # "},{"id":10,"href":"/netwerking.club/docs/interworking/scaling-networks/","title":"Scaling Networks","section":"Interworking","content":" Scaling Networks # "},{"id":11,"href":"/netwerking.club/docs/applications/sdp-and-sip/","title":"SDP \u0026 SIP","section":"Applications","content":" SDP \u0026amp; SIP # "},{"id":12,"href":"/netwerking.club/docs/applications/smtp/","title":"SMTP","section":"Applications","content":" SMTP # "},{"id":13,"href":"/netwerking.club/docs/applications/snmp/","title":"SNMP","section":"Applications","content":" SNMP # "},{"id":14,"href":"/netwerking.club/docs/applications/soap-and-rest/","title":"SOAP \u0026 REST","section":"Applications","content":" SOAP \u0026amp; REST # "},{"id":15,"href":"/netwerking.club/docs/protocols/tcp/","title":"TCP","section":"Protocols","content":" Transmission Control Protocol (TCP) # "},{"id":16,"href":"/netwerking.club/docs/other/future-of-the-internet/","title":"The Future of the Internet","section":"Other","content":" The Future of the Internet # "},{"id":17,"href":"/netwerking.club/docs/fundamentals/transmission/","title":"Transmission","section":"Fundamentals","content":" Transmission # Encoding # First of all, the physical layer transmits signals, not bits. So we need to translate back and forth. This is done via modulation and demodulation.\nClock recovery # Clock recovery means being able to recover and deduce the senders clock, since the sender sends information triggered by clock cycles.\nIntuitively, clock recovery is easier by sending frequent 0-1 and 1-0 transmissions.\nScheme 1 - NRZ # The simplest scheme.\nBit 1 may be sent as a high voltage signal and bit 0 as a low one.\nNRZ = Non-Return to Zero.\nMain issue is that consecutive identical voltages are hard to distinguish by the receiver. For example, cannot distinguish a zero from no signal and too many consecutive ones cause the baseline signal to deviate from the true average.\nScheme 1 - NRZI # NRZI = Non-Return to Zero Inverted.\nHere the sender stays the same to signal a zero and changes to signal a 1. Does not solve the consecutive zeros problem, but does solve the consecutive 1s problem.\nManchester Encoding # The sender transitions from low to high in order to encode a 0, and a high to low transition to encode a 1. Ensures transmission on every bit so clock recovery is easy. The problem is that it is somewhat inefficient because it requires that more bits be transmitted than those in the original signal.\n4B/5B # Solves the inefficiency of Manchester encoding by converting every sequence of 4 bits to 5, and encodes the four bits in NRZI. This way no consecutive sequence of 3 or more zeros to ever appear.\nFraming # Assuming that we solved encoding, now we are concerned with sending really big files across.\nOne way is just a bit or byte stream and continually send bits/bytes across.\nAnother approach would be to “packetize” or make frames of smaller sizes and ship them across. This is framing.\nExamples of framing protocols:\nPPP, point-to-point protocol. byte oriented. And HDLC, high-level data link control. bit oriented. SONET, clock-based framing. The idea is that the sender demarcates the sequence of bits with a BEGIN marker, (01111110 in the case of HLDC) and the bits in between correspond to a frame.\nThe link layer sends the frame via one of the modulation methods, and then at the receiver, the link layer delivers them to the app that request it.\nEach protocol has a\npeer interface and a service interface. Service interface is how objects on the same computer interact with it.\nA peer interface is how to talk to other machines\nError Detection # Parity # A parity bit, or check bit, is a bit added to a string of binary code.\nAccordingly, there are two variants of parity bits: even parity and odd parity.\nEven parity → for a given set of bits, the bits whose value is 1 are counted.\nIf that count is odd, the parity bit value is set to 1, making the total count of occurrences of 1s in the whole set (including the parity bit) an even number.\nIf even, set to 0.\n2D Parity does this for 6 bytes, then has a parity byte.\nwhere the ith bit is the parity of the ith column created by the ith elements in each previous byte.\nCheck Sums # Add up all the words that are transmitted and then transmit that sum.\nCRC - cyclic redundancy check # ah… later\nReliable Transmission (error correction) # Stop and Wait # ARQ (Automatic Repeat reQuest).\nSender sends a packet (or frame) and waits to receive and ACK before it sends the next packet. Aka the Stop-and-Wait scheme.\nMain draw back is that it only allows for one outstanding packet in each roundtrip time RTT. So it doesn’t “fill the pipe” between send and receiver.\nSliding Window # Assuming bandwidth B and RTT d, supposed the quantity if bits we can fit into the “pipe” is P.\nIf the pipe is full then B is fully utilized.\nIf no data is lost, then at best throughput is P/d for the receiver.\nPipe size / the round trip time.\nSo to utilize bandwidth the right pipe size is, B x d.\nThis is often called the bandwidth delay product of the network between sender and receiver.\nIdeally the sender want B x d bytes in the pipe before checking what’s been received.\n(unless the size of the packet is too big for that)\nSo we can do this with a window based protocol.\nSending a windows worth of packets and waiting for an ACK for all of them will also sometimes under utilize the pipe, so we actually use sliding window protocols.\nWhich means ACK as set as packets are received. Every time an ACK is received, the window slides and is sent again. So data will be sent multiple times, but this is actually the most efficient thing to do because the pipe is always full.\nExponential Backoff - if collision is detected, waits and tries again. If collides again, doubles wait time and tries again, over and over again.\n"},{"id":18,"href":"/netwerking.club/docs/protocols/udp/","title":"UDP","section":"Protocols","content":" User Datagram Protocol (UDP) # "},{"id":19,"href":"/netwerking.club/docs/interworking/","title":"Interworking","section":"Docs","content":" Interworking # So far we have been talking about fairly homogenous systems. So what about systems with different types of protocols?\nThis brings us to “internetworking” different networks together.\nAn internet is a logical network built out of a collection of physical networks.\nTo define a internetwork, you need a service model, that is, the host-to-host services you want to provide.\nThe IP service model can be thought of as having two parts: an addressing scheme, which provides a way to identify all hosts in the internetwork, and a datagram (connectionless)model of data delivery.\nOne of the biggest issues in a heterogeneous network is that each network tends to have its own idea of how big a packet should be. So we need to talk about fragmentation and reassembly.\nThe central idea here is that every network type has a maximum transmission unit (MTU), which is the largest IP datagram that it can carry in a frame.\nSo fragmentation occurs when the path of a packet goes through a network with a smaller MTU than the one it is currently in.\nTo enable these fragments to be reassembled at the receiving host, they all carry the same identifier in the Ident field.\nEthernet addresses are flat, they give no information of the network topology.\nIn contrast, IP addresses are hierarchical, by which we mean that they are made up of several parts that correspond to some sort of hierarchy in the internetwork. Specifically, IP addresses consist of two parts, usually referred to as a network part and a host part.\nClass A addresses Class B addresses Class C addresses The original idea was that the Internet would consist of\na small number of wide area networks (these would be class A networks), a modest number of campus-sized networks (these would be class B networks), and a large number of LANs (these would be class C networks). Forwarding is the process of taking a packet from an input and sending it out on the appropriate output.\nRouting is the process of building up the tables that allow the correct output for a packet to be determined.\n"},{"id":20,"href":"/netwerking.club/docs/fundamentals/switches-links-bridges/","title":"Switches, Links, \u0026 Bridges","section":"Fundamentals","content":" Switches, Links, \u0026amp; Bridges # A switch is a specialized computer that\nallows it to receive and send bits/frames that arrive over links. Links are physically connected to switches at attachment ports or switch ports (usually just called ports).\nNetworks built out of such components are usually just called receive and forward networks.\nThe fundamental idea of packet switching is to allow multiple flows of data over a single physical link, AKA multiplexing.\nCircuit Switching # Now telephone networks use something called circuit switching opposed to the internet’s packet switching.\nCircuit switches don’t require the frames to contain any special info on how to forward frames, but in packet switching they do.\nThere are 2 phases in circuit switching:\nA setup phase where some state is configured along a path from source to destination And then the transfer phase where the frames are actually sent Inefficiencies with circuit switching:\ntends to waste bandwidth if the workload uses a variable bit length Packet Switching # In packet switching the frames have a bit of extra information in the which tells the switch how to forward it. This is called the header.\nThis header uniquely identifies the destination of the packet.\nThere are a few ways that the switch decides what to do. 2 common and one less common.\ndatagram or connectionless approach virtual circuit or connection-oriented approach source routing (less common but has some useful applications) Datagram approach # Every packet contains the complete destination address of the packet.\nThe switch consults a forwarding table, also called a routing table (although there is a distinction between the two) so that it knows what port to send it off to.\nUsually also contains receiver address, to make sending packets back easier.\nThe interesting part is how the routing table is made. this is done in the background using something called a routing protocol.\nA host can send a packet anywhere at anytime but has no way of knowing if they have been successfully received.\nEach packet is forwarded independently of the other packets that it is related to so they may come out of order (if they take different routes to their destination).\nA switch or link failure is not that big of a deal in the grand scheme of things.\nSource Routing # Contains the full route that a packet must take to get to its destination.\nIt is a complete sequence of switches or, more helpfully, per-switch network hops to each packet which means that no lookups are necessary.\nIt requires the sender to participate in a routing protocol to learn the topology of a network.\nThe name derives from the fact that all the information about network topology that is required to switch a packet across the network is provided by the source host.\nVirtual Circuit Routing # Hybrid between datagram routing and source routing.\nThe VC method is a connection oriented protocol. You can think of it as having two stages.\nconnection setup stage transfer stage To accomplish the first stage, it is necessary to get the source and the destination hosts to come to a “connection state” via all the switches in the route from one to the other.\nThis is done via a “VC table” in each of the switches along the way.\nEach entry in a VC table has:\na virtual circuit identifier, VCI, that uniquely identifies the connection at this switch an incoming interface on which packets will arrive at this switch an outgoing interface on which packets will leave from this switch a potentially different VCI for outgoing packets (but interface we mean a reference to a port)\nNow instead of using the destination from the header like in datagram routing, we use the VC table to route the packets.\nA VC can be manually set up by a network administrator, then it would have to be manually taken down so this is called a “permanent” VC, a PVC.\nOr it can be created dynamically by one of the hosts initiating connection via “signalling”. An SVC.\nOne of the most common applications of virtual circuits for many years was the construction of virtual private networks (VPNs), but even that application is now mostly supported using Internet-based technologies today.\nLAN switches # There is a class of switches used for forwarding packets between hosts on different Local Area Networks, such as Ethernets. They are usually called LAN switches but historically they have also been called bridges.\nIf you want to connect a pair of ethernets together, you could just put a node between them, with connections to both. (That is why its called a bridge). This device operates in promiscuous mode, accepting all frames transmitted on either of the Ethernets, and forwarding them to the other.\nA collection of LANs connected by one or more bridges is called an extended LAN.\nLearning Bridges # The idea that a bridge “learns” by building a cache of what stations are down stream of which port.\nIt builds this cache by looking at the source address of all the packets it receives\nHuge problem with loops of course, things can go in circles forever.\nThe trick is to find a loop free path in the bridge topology.\nThis is done using a distributed spanning tree algorithm.\nThis sounds really simple and obvious, BUT, switches do not have the luxury of seeing the entire network topology, so how do they compute the spanning tree?\nIt shares information with its neighbours and together they figure out whats what.\nVirtual LANs # Extended LANs do not scale (in practice, it is only practical to use maybe tens of bridges at once) because of broadcasting and the limitations of the distributed spanning tree algorithm (which scales linearly.\nWe can alternatively use Virtual LANs, VLANs.\nVLANs allow a single extended LAN to be partitioned into several seemingly separate LANs. Each virtual LAN is assigned an identifier (sometimes called a color), and packets can only travel from one segment to another if both segments have the same identifier)\n"},{"id":21,"href":"/netwerking.club/docs/fundamentals/ethernet/","title":"Ethernet","section":"Fundamentals","content":" Ethernet and Shared Media Access # And then when there are more than two computers trying to communicate over a medium (”link”), we have to deal with sharing.\nThis is the media access or channel access problem.\nProtocols to solve this are called MAC (media access control) protocols.\nThere are centralized and decentralized MAC protocols.\nAloha # The Ethernet has its roots in an early packet radio network, called Aloha, developed at the University of Hawaii to support computer communication across the Hawaiian Islands.\nUnicast, Broadcast, Multicast # Each frame transmitted on an Ethernet is received by every adaptor connected to that Ethernet.\nEach adaptor recognizes those frames addressed to its address and passes only those frames on to the host. Unicast is one-to-one is a transmission.\nA adaptor can also be programmed to run in promiscuous mode, in which case it delivers all received frames to the host, but this is not the normal mode.)\nIn addition to these unicast addresses, an Ethernet address consisting of all 1s is treated as a broadcast address; all adaptors pass frames addressed to the broadcast address up to the host.\nAn address that has the first bit set to 1 but is not the broadcast address is called a multicast address. Multicast addresses are used to send messages to some subset of the hosts on an Ethernet (e.g., all file servers).\n"},{"id":22,"href":"/netwerking.club/docs/protocols/","title":"Protocols","section":"Docs","content":" Protocols # "},{"id":23,"href":"/netwerking.club/docs/applications/","title":"Applications","section":"Docs","content":" Applications # "},{"id":24,"href":"/netwerking.club/docs/fundamentals/wireless/","title":"Wireless","section":"Fundamentals","content":" Wireless # "},{"id":25,"href":"/netwerking.club/docs/privacy-and-security/","title":"Privacy \u0026 Security","section":"Docs","content":" Privacy \u0026amp; Security # "},{"id":26,"href":"/netwerking.club/docs/other/","title":"Other","section":"Docs","content":" Other # "}]